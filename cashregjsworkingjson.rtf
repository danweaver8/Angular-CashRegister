{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf460
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 (function() \{\
  'use strict';\
  angular\
    .module('cashRegisterApp', [])\
    .controller('DashBoardController', DashBoardController)\
    .factory('cashRegisterService', cashRegisterService);\
\
\
  function DashBoardController(cashRegisterService) \{\
    var vm = this;\
    vm.currencySymbol = cashRegisterService.currency.symbol;\
\
    //functions\
    vm.addItem = scanProduct;\
    vm.applyEmpDiscount = applyEmpDiscount;\
\
    //Run\
    initDashboard();\
\
    function initDashboard() \{\
      cashRegisterService.init();\
      vm.totalCost = cashRegisterService.totalCost;\
      var productL = cashRegisterService.getProducts();\
       productL.then(function(result) \{  \
       // this is only run after getData() resolves\
       vm.productList = result;\
    \});\
       \
      var EmployeeL = cashRegisterService.getEmployees(); \
       EmployeeL.then(function(result) \{  \
       // this is only run after getData() resolves\
       vm.employeeList = result;\
    \});\
      vm.productSelectedName = "";\
      vm.scannedItems = cashRegisterService.scannedItems;\
    \}\
\
    function scanProduct() \{\
      var quantity = parseFloat(vm.productQuantity);\
      if (vm.productSelected && angular.isNumber(quantity)) // If valid product and quantity is a number?\
      \{\
        cashRegisterService.scan(vm.productSelected, quantity); // Now scan\
      \}\
      vm.totalCost = cashRegisterService.totalCost;\
    \}\
\
    function applyEmpDiscount() \{\
      cashRegisterService.applyEmployeeDiscount(vm.employeeSelected);\
      vm.totalCost = cashRegisterService.totalCost;\
    \}\
\
  \}\
\
  //cashRegisterService.$inject[];\
  function cashRegisterService($q, $http) \{\
    var scannedItems;\
    var totalCost = 0.00;\
    var currency = \{\
      name: 'BBD',\
      symbol: '$',\
      rate: 1.98\
    \};\
    var idGenerator = 0;\
    var productList=[];\
    var employeeList=[];\
    var discountProduct;\
    var EMP_DISCOUNT_PRODUCT_CODE;\
\
    EMP_DISCOUNT_PRODUCT_CODE = '9999';\
\
    discountProduct = \{\
      code: EMP_DISCOUNT_PRODUCT_CODE,\
      price: 0,\
      name: 'Employee Discount'\
    \};\
\
   function getProducts() \{\
      var deferred = $q.defer();\
       $http.get('json/Products.json')\
        .success(function (data) \{\
          productList = data;\
          deferred.resolve(data);\
        \})\
        .error(function (data) \{\
          deferred.reject(data);\
        \});\
      return deferred.promise;\
    \};\
    \
    function getEmployees() \{\
      var deferred = $q.defer();\
       $http.get('json/Employees.json')\
        .success(function (data) \{\
          employeeList = data;\
          deferred.resolve(data);\
        \})\
        .error(function (data) \{\
          deferred.reject(data);\
        \});\
      return deferred.promise;\
    \};\
\
    var service = \{\
      init: init,\
      scan: scan,\
      voidLastTransaction: voidLastTransaction,\
      applyEmployeeDiscount: applyEmployeeDiscount,\
      productList: productList,\
      employeeList: employeeList,\
      currency: currency,\
      totalCost: totalCost,\
      scannedItems: scannedItems,\
      getProducts: getProducts,\
      getEmployees: getEmployees\
    \};\
    return service;\
\
    function init() \{\
      this.scannedItems = [];\
      this.totalCost = 0.00;\
      this.idGenerator = 0;\
    \}\
\
    function scan(product, quantity) \{\
      this.idGenerator++;\
      this.scannedItems.push(\{\
        id: this.idGenerator,\
        product: product,\
        quantity: quantity,\
        cost: product.price * quantity\
      \}); //Behaves as a stack\
      this.totalCost += calculateProductCost(product, quantity); //Add cost to total\
    \}\
\
    function voidLastTransaction() \{\
      if (this.scannedItems.length === 0) return false; //empty stack\
      var item = this.scannedItems.pop();\
\
      if (item.product.code === EMP_DISCOUNT_PRODUCT_CODE) \{\
        this.totalCost *= (100 + item.product.price) / 100;\
      \} else \{\
        this.totalCost -= item.cost;\
      \}\
      return true;\
    \}\
\
    function applyEmployeeDiscount(employee) \{\
      this.idGenerator++;\
      var employeeDiscountProduct = angular.copy(discountProduct); //Shallow copy\
      employeeDiscountProduct.price = employee.discount;\
\
      this.scannedItems.push(\{\
        id: this.idGenerator,\
        product: employeeDiscountProduct,\
        quantity: 1,\
        cost: employeeDiscountProduct.price\
      \});\
      this.totalCost = calculateTotal(this.scannedItems) * ((100 - employee.discount) / 100);\
    \}\
\
    function calculateProductCost(product, quantity) \{\
      return product.price * quantity;\
    \}\
\
    function calculateTotal(scannedItems) \{\
      //Loop through scannedItems to calculate total cost\
      var total = 0;\
      angular.forEach(scannedItems, function(item) \{\
        if (item.product.code !== EMP_DISCOUNT_PRODUCT_CODE) \{\
          total += item.cost;\
        \}\
      \});\
      return total;\
    \}\
\
    function itemLookup(data, code) \{\
      var item = null;\
      angular.forEach(data, function(value) \{\
        if (code === value.code) \{\
          item = value;\
          return false; // break out of loop when we find item\
        \}\
      \});\
      return item;\
    \}\
  \}\
\})();}